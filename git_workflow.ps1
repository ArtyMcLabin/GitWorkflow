#!/usr/bin/env pwsh
# Git Workflow Script v1.14
# This script implements the workflow defined in README.md

param(
    [Parameter()]
    [string]$CommitMessage = "",
    
    [Parameter()]
    [ValidateSet("public", "private")]
    [string]$Visibility = "private",

    [Parameter()]
    [string]$License = "MIT"
)

function Update-WorkflowTool {
    # Check if we're running from a submodule
    $workflowPath = Split-Path -Parent $PSCommandPath
    if (Test-Path (Join-Path $workflowPath ".git")) {
        Write-Host "Checking for GitWorkflow updates..."
        try {
            Push-Location $workflowPath
            $currentCommit = git rev-parse HEAD
            git submodule update --remote --merge
            $newCommit = git rev-parse HEAD
            if ($currentCommit -ne $newCommit) {
                Write-Host "Updated GitWorkflow from $currentCommit to $newCommit"
                Write-Host "Changes:"
                git log --oneline $currentCommit..$newCommit
            } else {
                Write-Host "GitWorkflow is already up to date"
            }
        } catch {
            Write-Error "Failed to update GitWorkflow: $_"
        } finally {
            Pop-Location
        }
    }
}

function Initialize-GitRepo {
    # Check if git is already initialized
    if (Test-Path .git) {
        Write-Host "Git repository already initialized"
        git remote -v  # Display remote info if exists
        return $false
    }

    # Check repository name from current directory
    $script:repoName = Split-Path -Leaf (Get-Location)

    # Check if repository exists on GitHub
    gh repo view $env:GITHUB_USERNAME/$repoName 2>$null
    if ($?) {
        Write-Host "Repository already exists on GitHub: $repoName"
        return $false
    }

    # Initialize git and set master branch
    git init
    git branch -M master

    # Create standard files if they don't exist
    if (!(Test-Path README.md)) {
        @"
# $repoName

# DISCLAIMER
This README was auto-generated by AI using GitWorkflow tool. Content might need human review and adjustments.

## Description
Add your project description here.

## Features
- Feature 1
- Feature 2

## Installation
Describe installation steps here.

## Usage
Describe how to use your project.

## License
This project is licensed under the $License License - see the [LICENSE](LICENSE) file for details.
"@ | Out-File -FilePath README.md -Encoding utf8
    }
    if (!(Test-Path .gitignore)) {
        New-Item .gitignore
    }

    # Add standard .gitignore contents
    @'
# Windows system files
Thumbs.db
desktop.ini

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Node
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDEs
.idea/
.vscode/
*.swp
*.swo
*~

# Environment
.env
.venv
venv/
ENV/
'@ | Out-File -FilePath .gitignore -Encoding utf8

    # Add license file
    Add-License -LicenseType $License -RepoOwner $env:GITHUB_USERNAME

    return $true
}

function Update-GithubInfo {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $repoName = Split-Path -Leaf (Get-Location)
    
    $githubInfo = @{
        repository_name = $repoName
        last_push = $timestamp
        github_url = "https://github.com/$env:GITHUB_USERNAME/$repoName"
    }

    $githubInfo | ConvertTo-Json | Out-File -FilePath .github_info -Encoding utf8
}

function Push-ToGithub {
    param(
        [string]$CommitMessage,
        [string]$Visibility
    )

    try {
        # Stage all changes
        git add .

        # Get current timestamp for commit message
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm"
        
        # Use provided commit message or default to timestamp
        if ([string]::IsNullOrEmpty($CommitMessage)) {
            $CommitMessage = "Update ${timestamp}: Regular update"
        }

        # Check if there are changes to commit
        $status = git status --porcelain
        if ([string]::IsNullOrEmpty($status)) {
            Write-Host "No changes to commit"
            return
        }

        # Commit with message
        git commit -m $CommitMessage

        # Push to GitHub
        git push -u origin master
        Write-Host "Successfully pushed changes to GitHub"
    } catch {
        Write-Error "Failed to push to GitHub: $_"
        throw
    }
}

function Add-License {
    param(
        [string]$LicenseType,
        [string]$RepoOwner
    )

    $year = Get-Date -Format "yyyy"
    
    switch ($LicenseType.ToUpper()) {
        "MIT" {
            try {
                # Fetch MIT license template from official source
                $licenseText = (Invoke-WebRequest -Uri "https://raw.githubusercontent.com/licenses/license-templates/master/templates/mit.txt").Content
                # Replace year and owner
                $licenseText = $licenseText.Replace("[year]", $year).Replace("[fullname]", $RepoOwner)
                $licenseText | Out-File -FilePath LICENSE -Encoding utf8
            }
            catch {
                Write-Warning "Failed to fetch MIT license online. Using fallback method..."
                gh license apply mit
            }
        }
        default {
            Write-Host "License type $LicenseType not supported yet. Using MIT license."
            Add-License -LicenseType "MIT" -RepoOwner $RepoOwner
        }
    }
}

function Remove-UnnecessaryFiles {
    # List of files to always remove
    $filesToRemove = @(
        'desktop.ini',
        '.github_info',  # We don't need this anymore as README contains all info
        'Thumbs.db',
        '.DS_Store'      # For Mac users
    )

    foreach ($file in $filesToRemove) {
        if (Test-Path $file) {
            Remove-Item $file -Force
            Write-Host "Removed unnecessary file: $file"
        }
    }
}

# Main execution
try {
    Update-WorkflowTool
    Remove-UnnecessaryFiles
    $isNewRepo = Initialize-GitRepo
    if ($isNewRepo) {
        Write-Host "Creating new repository on GitHub..."
        gh repo create $repoName --$Visibility
        $repoUrl = "https://github.com/$env:GITHUB_USERNAME/$repoName"
        Write-Host "`nRepository successfully created at: $repoUrl"
        Write-Host "✓ Repository creation successful"
    }
    Update-GithubInfo
    Push-ToGithub -CommitMessage $CommitMessage -Visibility $Visibility
    Write-Host "✓ Code pushed successfully"
    Write-Host "`nGit workflow completed successfully"
} catch {
    Write-Error "Git workflow failed: $_"
    exit 1
} 